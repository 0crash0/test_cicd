---
#namespace
apiVersion: v1
kind: Namespace
metadata:
  name: nginx-fpm-${BRANCH_NAME}
  labels:
    name: nginx-fpm-${BRANCH_NAME}


---
# PV

apiVersion: v1
kind: PersistentVolume
metadata:
  name: nginx-fpm-${BRANCH_NAME}-pv
  namespace: nginx-fpm-${BRANCH_NAME}
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/var/www-${BRANCH_NAME}"


---
# PVC

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-fpm-${BRANCH_NAME}-pvc
  namespace: nginx-fpm-${BRANCH_NAME}
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi

---
#NGINX config map

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-config
  namespace: nginx-fpm-${BRANCH_NAME}
data:
  nginx.conf: |
    #user www-data;
    worker_processes auto;
    pid /var/run/nginx.pid;
    error_log /var/log/nginx/error.log warn;
    events {
    worker_connections  1024;
    # multi_accept on;
    }
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        #                  '$status $body_bytes_sent "$http_referer" '
        #                  '"$http_user_agent" "$http_x_forwarded_for"';
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        log_format logstash '$remote_addr - $remote_user [$time_local] "$host" '
                            '"$request" $status $body_bytes_sent '
                            '"$http_referer" "$http_user_agent"';
        log_format metrics '$http_host '
                           '$proxy_protocol_addr [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           '$request_time '
                           '$upstream_response_time';
        log_format full    '$remote_addr - $host [$time_local] "$request" '
                           'request_length=$request_length '
                           'status=$status bytes_sent=$bytes_sent '
                           'body_bytes_sent=$body_bytes_sent '
                           'referer=$http_referer '
                           'user_agent="$http_user_agent" '
                           'upstream_status=$upstream_status '
                           'request_time=$request_time '
                           'upstream_response_time=$upstream_response_time '
                           'upstream_connect_time=$upstream_connect_time '
                           'upstream_header_time=$upstream_header_time';
        access_log  /var/log/nginx/access.log  main;
        access_log  /var/log/nginx/access.log  main;
        error_log	/var/log/nginx/error.log; 
        #error_log /var/log/nginx/error.log crit
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        types_hash_max_size 2048;
        server_tokens off;
        #keepalive_timeout  0;
        keepalive_timeout  180;
        reset_timedout_connection on;
        send_timeout 180s;
        client_header_timeout 180s;
        client_body_timeout 180s;
        ignore_invalid_headers on;
        #    output_buffers 1 32k;
        postpone_output 1460;
        server_name_in_redirect off;
        client_header_buffer_size 8k;
        #client_body_buffer_size  16K;
        client_max_body_size 55m;
        large_client_header_buffers 8 8k;
        # client_body_temp_path  /var/www/tmp/client_body_temp 1 2;
        # proxy_temp_path  /var/www/tmp/proxy_temp 1 2;
        # fastcgi_temp_path /var/www/tmp/fastcgi_temp 1 2;
        # uwsgi_temp_path /var/www/tmp/uwsgi_temp 1 2;
        # scgi_temp_path /var/www/tmp/scgi_temp 1 2;
        ##
        # Gzip Settings
        ##
        gzip  on;
        gzip_min_length 1400;
        gzip_buffers 64 8k;
        gzip_comp_level   9;
        gzip_http_version 1.0;
        gzip_proxied any;
        gzip_types text/plain text/css text/xml text/json application/xml text/javascript image/x-icon application/json application/pdf application/javascript application/x-javascript font/opentype application/vnd.ms-fontobject image/svg+xml;
        gzip_disable     "MSIE [1-6]\.(?!.*SV1)";
        ##
        # SSL Settings
        ##
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
        ssl_prefer_server_ciphers on;
        #resolver 127.0.0.1;
        include /etc/nginx/sites-enabled/default;
    }
  default: |
    server {
      listen 80 default_server;
      listen [::]:80 default_server;
      server_name _;
      set $CUSTOM "winsrv2022";
      set $appmode prod; #Режим разработки dev/prod
      set $debug 0; #Режим отладки 0/1
      set $PHPFPM phpfpm:9000;
      root /usr/share/nginx/html;
      # Add index.php to the list if you are using PHP
      index reqincoming.php index.php default.php index.html index.htm index.nginx-debian.html;
      error_log  /var/log/nginx/error.log;
      access_log /var/log/nginx/access.log;
      fastcgi_buffers         16  16k;
      fastcgi_buffer_size         32k;
      proxy_buffer_size   128k;
      proxy_buffers   4 256k;
      proxy_busy_buffers_size   256k;
      location ~ /\.ht {
        deny all;
      }
      location ~ .php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php-svc:9000;
        fastcgi_param APPMODE $appmode;
        fastcgi_param DEBUG $debug;
        fastcgi_param CUSTOM $CUSTOM;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
        fastcgi_param REQUEST_SCHEME $scheme;
        include fastcgi_params;
      }
    }



---
#NGINX deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx
    layer: frontend
  namespace: nginx-fpm-${BRANCH_NAME}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      initContainers:
        - name: init-service
          #image: alpine
          image: ${dockerimagename}:${BRANCH_NAME}
          command: ["sh", "-c"]
          args:
            - |
              rm -rf /usr/share/nginx/html/* && cp -R /var/www/html/ /usr/share/nginx/html/
          #    svn export --non-interactive --no-auth-cache --username "saprinap" --password "Cfvjcjan2024" "http://redmine.mow.samo.ru/svn/incoming.online/_client/sayama/api-incoming/" --depth "infinity" /usr/share/nginx/html/api-incoming/

          #    git clone https://github.com/ElfQrin/webservertest.git /usr/share/nginx/html
            #command: ['sh', '-c', "until nslookup service.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for service; sleep 2; done"]
          volumeMounts:
            - name: nginx-fpm-data
              mountPath: /usr/share/nginx/html
      containers:
        - name: nginx
          image: nginx:stable-alpine3.20
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-fpm-data
              mountPath: /usr/share/nginx/html
            - name: nginx-config
              subPath: nginx.conf
              mountPath: /etc/nginx/nginx.conf
            - name: nginx-config
              #mountPath: /etc/nginx/conf.d/default.conf
              subPath: default
              mountPath: /etc/nginx/sites-enabled/default
            - name: nginx-config
              subPath: api.samo
              mountPath: /etc/nginx/conf.d/samo/api.samo
            - name: nginx-config
              subPath: b2b.samo
              mountPath: /etc/nginx/conf.d/samo/b2b.samo
          resources:
            limits:
              cpu: 1000m
            requests:
              cpu: 200m
          readinessProbe:
            tcpSocket:
              port: 80
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
      volumes:
        #- name: contents
        #  hostPath:
        #    path: /var/website
        #    type: Directory
        - name: nginx-fpm-data
          persistentVolumeClaim:
            claimName: nginx-fpm-${BRANCH_NAME}-pvc
        - name: nginx-config 
          configMap: 
            name: nginx-config

---
#NGINX service

kind: Service 
apiVersion: v1 
metadata:
  name: nginx
  labels:
    app: nginx
    layer: frontend
  namespace: nginx-fpm-${BRANCH_NAME}
spec:
  type: ClusterIP
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
      #nodePort: 30000



---
#PHP-FPM deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: phpfpm
  labels:
    app: phpfpm
    layer: backend
  namespace: nginx-fpm-${BRANCH_NAME}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: phpfpm
  template:
    metadata:
      labels:
        app: phpfpm
    spec:
      containers:
        - name: phpfpm
          image: 0crash0/php-samo:8.3.11-fpm-msodbc18-alpine3.20
          ports:
            - containerPort: 9000
          volumeMounts:
            - name: nginx-fpm-data
              mountPath: /usr/share/nginx/html
          resources:
            limits:
              cpu: 500m
            requests:
              cpu: 200m
          readinessProbe:
            tcpSocket:
              port: 9000
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/bash","-c","/bin/sleep 1; kill -QUIT 1" ]
        
      volumes:
        - name: nginx-fpm-data
          persistentVolumeClaim:
            claimName: nginx-fpm-${BRANCH_NAME}-pvc


---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: php-horiz-scaler
  namespace: nginx-fpm-${BRANCH_NAME}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: phpfpm
  minReplicas: 1
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 10

---
#PHP-FPM service

kind: Service 
apiVersion: v1 
metadata:
  name: php-svc
  labels:
    app: phpfpm
    layer: backend
  namespace: nginx-fpm-${BRANCH_NAME}
spec:
  ports:
    - port: 9000
      targetPort: 9000
  selector:
    app: phpfpm

---
# ingress

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-fpm-ing
  namespace: nginx-fpm-${BRANCH_NAME}
spec:
  defaultBackend:
    service:
      name: nginx
      port:
        number: 80
  rules:
    - host: test-${BRANCH_NAME}.samo.ru
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx
                port:
                  number: 80