def inputRemoveKuber
def inputRemoveDocker

pipeline {

    agent any
    environment {
        registryCredentials = 'samodocker-repo' 
        removingDockerImageName = "0crash0/testdepl"

        TELEGRAM_TOKEN = credentials('telegram-token') // change this line with your credential id for Telegram bot access token
        TELEGRAM_CHAT_ID = 389929520 // change this line with your credential id for Telegram bot chat id

        TEXT_PRE_BUILD = "Jenkins is building ${JOB_NAME}"

        TEXT_SUCCESS_BUILD = "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ üòä üöÄ\n–≤–µ—Ç–∫–∞: ${SOURCE_BRANCH_NAME} [–ª–æ–≥ —Å–±–æ—Ä–∫–∏](${env.BUILD_URL})"
        TEXT_FAILURE_BUILD = "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π ü§ß\n–≤–µ—Ç–∫–∞: ${SOURCE_BRANCH_NAME} [–ª–æ–≥ —Å–±–æ—Ä–∫–∏](${env.BUILD_URL})"
        TEXT_ABORTED_BUILD = "‚õî –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ üò±\n–≤–µ—Ç–∫–∞: ${SOURCE_BRANCH_NAME} [–ª–æ–≥ —Å–±–æ—Ä–∫–∏](${env.BUILD_URL})"
    }
    stages {

        stage('Removing from kubernetes') {
        			  steps {
        				script {
        					//if(inputRemoveKuber == "yes"){
        						sh "echo 'Deploy to kubernetes is started!'"
        						withKubeConfig( clusterName: 'microk8s-cluster', contextName: 'microk8s-cluster', credentialsId: 'kube_just_cert', namespace: 'def', restrictKubeConfigAccess: false, serverUrl: 'https://172.16.0.230:16443') {
        						  sh 'curl -LO "https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/kubectl"'
        						  sh 'chmod u+x ./kubectl'
        						  sh "./kubectl delete namespace nginx-fpm-${SOURCE_BRANCH_NAME}  || exit 0" //--force --grace-period=0
                                  sh "./kubectl delete pv nginx-fpm-${SOURCE_BRANCH_NAME}-pv || exit 0"
        						}
        						sh "echo 'nginx-fpm-${SOURCE_BRANCH_NAME} Removed!'"
        					//} else {
        					//	sh "echo 'Removing is canceled!'"
        					//}
        				}
        			  }
        }

        stage('Remove from Docker Registry'){
            steps{
                script {
                    //if(inputRemoveDocker == "yes"){
                    withCredentials([usernamePassword(credentialsId: env.registryCredentials, usernameVariable: 'username', passwordVariable: 'password')]){
                 
                        def url =  "http://registry.samo.ru/repository/docker-host/v2/${env.removingDockerImageName}/manifests/${SOURCE_BRANCH_NAME}"
                        
                        //sh curl -u <username>:<password> -X DELETE "https://samodocker.samo.ru/0crash0/testdepl:${SOURCE_BRANCH_NAME}"
                        def response = sh(script: "curl -u $username:$password -X DELETE $url", returnStdout: true).trim()
                        //sh "docker rmi docker.io/library/0crash0/testdepl:${SOURCE_BRANCH_NAME}" //NOT WORKING CERDS?
                        echo response
                        //echo 'remove docker image from registry'
                    }
                }
            }
        }
    }
    post{
          success{
               //telegramSend(message: 'Hello World', chatId: 389929520)
                  sh "curl -s -X POST https://api.telegram.org/bot${env.TELEGRAM_TOKEN}/sendMessage -d chat_id='${env.TELEGRAM_CHAT_ID}' -d text='${env.TEXT_SUCCESS_BUILD}'"
          }
          failure{
               //telegramSend(message: 'Hello World', chatId: 389929520)
               sh "curl -s -X POST https://api.telegram.org/bot${env.TELEGRAM_TOKEN}/sendMessage -d chat_id=${env.TELEGRAM_CHAT_ID} -d text=${env.TEXT_SUCCESS_BUILD} ERROR MESSAGE: ${env.BUILD_FAILED_MESSAGE}"
          }
          aborted{
               //telegramSend(message: 'Hello World', chatId: 389929520)
                sh "curl -s -X POST https://api.telegram.org/bot${env.TELEGRAM_TOKEN}/sendMessage -d chat_id=${env.TELEGRAM_CHAT_ID} -d text=${env.TEXT_ABORTED_BUILD}"
          }

    }
}