def inputRemoveKuber
def inputRemoveDocker

pipeline {

    agent any
    environment {

        TELEGRAM_TOKEN = credentials('telegram-token') // change this line with your credential id for Telegram bot access token
        TELEGRAM_CHAT_ID = 389929520 // change this line with your credential id for Telegram bot chat id

        TEXT_PRE_BUILD = "Jenkins is building ${JOB_NAME}"

        TEXT_SUCCESS_BUILD = "Build ${JOB_NAME}-${env.BUILD_ID} on ${env.BUILD_URL} -- ${SOURCE_BRANCH_NAME} is Deleted from kuber"
        TEXT_FAILURE_BUILD = "Build ${JOB_NAME}-${env.BUILD_ID} on ${env.BUILD_URL} -- ${SOURCE_BRANCH_NAME} deletion is Failure"
        TEXT_ABORTED_BUILD = "Build ${JOB_NAME}-${env.BUILD_ID} on ${env.BUILD_URL} -- ${SOURCE_BRANCH_NAME} deletion is Aborted"
    }
    stages {

        stage("Interactive_Input") {
            steps {
                //sh 'echo $(env)'
                telegramSend(message: "Choose required", chatId: "${env.TELEGRAM_CHAT_ID}")
                script {

                    def userInput = input(
                            id: 'userInput', message: "Branch ${SOURCE_BRANCH_NAME} is deleted are we remove it from kuber?",
                            parameters: [
                                    [$class: 'ChoiceParameterDefinition',
                                    choices: ['no','yes'].join('\n'),
                                    name: 'inputKuber',
                                    description: 'Remove branch from kubernetes?'],
                                    [$class: 'ChoiceParameterDefinition',
                                     choices: ['no','yes'].join('\n'),
                                     name: 'inputDocker',
                                     description: 'Remove docker image from registry?'],
                            ])

                    inputRemoveKuber = userInput.inputKuber
                    inputRemoveDocker = userInput.inputDocker
                }
            }
        }
        stage('Removing from kubernetes') {
        			  steps {
        				script {
        					if(inputRemoveKuber == "yes"){
        						sh "echo 'Deploy to kubernetes is started!'"
        						withKubeConfig( clusterName: 'microk8s-cluster', contextName: 'microk8s-cluster', credentialsId: 'kube_just_cert', namespace: 'def', restrictKubeConfigAccess: false, serverUrl: 'https://172.16.0.230:16443') {
        						  sh 'curl -LO "https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/kubectl"'
        						  sh 'chmod u+x ./kubectl'
        						  sh "./kubectl delete namespace nginx-fpm-${SOURCE_BRANCH_NAME} --force --grace-period=0"
        						}
        						sh "echo 'nginx-fpm-${SOURCE_BRANCH_NAME} Removed!'"
        					} else {
        						sh "echo 'Removing is canceled!'"
        					}
        				}
        			  }
        }

        stage('Remove from Docker Registry'){
            steps{
                script {
                    if(inputRemoveDocker == "yes"){
                        //sh curl -u <username>:<password> -X DELETE "<artifactory_url>/artifactory/<repository>/<image>:<tag>"
                        //docker rmi docker.io/library/0crash0/testdepl:wwa
                        echo 'remove docker image from registry'
                    }
                }
            }
        }
    }
    post{
          success{
               //telegramSend(message: 'Hello World', chatId: 389929520)
                  sh "curl -s -X POST https://api.telegram.org/bot${env.TELEGRAM_TOKEN}/sendMessage -d chat_id='${env.TELEGRAM_CHAT_ID}' -d text='${env.TEXT_SUCCESS_BUILD}'"
          }
          failure{
               //telegramSend(message: 'Hello World', chatId: 389929520)
               sh "curl -s -X POST https://api.telegram.org/bot${env.TELEGRAM_TOKEN}/sendMessage -d chat_id=${env.TELEGRAM_CHAT_ID} -d text=${env.TEXT_SUCCESS_BUILD}"
          }
          aborted{
               //telegramSend(message: 'Hello World', chatId: 389929520)
                sh "curl -s -X POST https://api.telegram.org/bot${env.TELEGRAM_TOKEN}/sendMessage -d chat_id=${env.TELEGRAM_CHAT_ID} -d text=${env.TEXT_ABORTED_BUILD}"
          }

    }
}